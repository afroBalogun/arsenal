import React, { useEffect, useState, useRef } from "react";
import Brendon from "./components/Brendon.tsx";
import PaulDavis from "./components/PaulDavis.tsx";
import Thomas from "./components/Thomas.tsx";
import David from "./components/David.tsx";
import Wright from "./components/Wright.tsx";
import Yankey from "./components/Yankey.tsx";
import History from "./components/History.tsx";
import Henry from "./components/Henry.tsx";
import Asante from "./components/Asante.tsx";
import Saka from "./components/Saka.tsx";
import "./style.css";
import { useGSAP } from '@gsap/react';
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(useGSAP, ScrollTrigger);

export default function App() {
  const containerRef = useRef<HTMLDivElement>(null);
  const [screenHeight, setScreenHeight] = useState(window.innerHeight);
  const [loading, setLoading] = useState<boolean>(true); 


  useEffect(() => {
    const handleResize = () => {
      setScreenHeight(window.innerHeight);
    };

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);
  
  useEffect(() => {
    // Simulate a loading delay
    setTimeout(() => {
      setLoading(false);
    }, 2000); // Adjust the time as needed
  }, []);

  useGSAP(() => {
    if (!loading) {
      gsap.registerPlugin(ScrollTrigger);
      const sections = gsap.utils.toArray<HTMLDivElement>(".slide");
      const container = containerRef.current;

      if (container) {
        const totalWidth = sections.reduce((acc, section) => {
          return acc + section.getBoundingClientRect().width;
        }, 0);

        gsap.to(sections, {
          xPercent: -100 * (sections.length - 1),
          ease: "none",
          scrollTrigger: {
            trigger: container,
            pin: true,
            scrub: 1,
            snap: 1 / (sections.length - 1),
            end: `+=${totalWidth}`,
            markers: false, // Optional: enable markers for debugging
          },
        });
      }
    }
  }, [loading]);

  return (
<div>
  {loading? (
    <div className="flex justify-center items-center h-screen">
      <img src="images/football.gif" alt="Loading..." className="w- h-" />
    </div>

  ):(
    <div
    ref={containerRef}
    className="app w-full h-screen flex bg-white whitespace-nowrap overflow-x-visible"
  >
    <div className="min-w-[50%] flex-shrink-0 slide">
        <Brendon />
      </div>

      <div className="min-w-[50%] flex-shrink-0 slide">
        <PaulDavis />
      </div>

      <div className="min-w-[10%] flex-shrink-0 slide">
        <Thomas screenHeight={screenHeight} />
      </div>

      <div className="min-w-[38%] flex-shrink-0 slide">
        <David />
      </div>

      <div className="min-w-[20%] flex-shrink-0 slide">
        <Wright screenHeight={screenHeight} />
      </div>

      <div className="min-w-[20%] flex-shrink-0 slide">
        <Yankey screenHeight={screenHeight} />
      </div>

      <div className="min-w-[50%] flex-shrink-0 slide">
        <History screenHeight={screenHeight} />
      </div>

      <div className="min-w-[20%] flex-shrink-0 slide">
        <Henry screenHeight={screenHeight} />
      </div>

      <div className="min-w-[40%] flex-shrink-0 slide">
        <Asante screenHeight={screenHeight} />
      </div>

      <div className="min-w-[20%] flex-shrink-0 slide">
        <Saka screenHeight={screenHeight} />
      </div>
      </div>

  )}
</div>
  );
}
